--- ddclient.in.orig	2022-05-16 00:12:34 UTC
+++ ddclient.in
@@ -29,6 +29,7 @@ use Getopt::Long;
 use IO::Socket::INET;
 use Socket qw(AF_INET AF_INET6 PF_INET PF_INET6);
 use Sys::Hostname;
+use POSIX 'setsid';
 
 use version 0.77; our $VERSION = version->declare('v3.10.0_2');
 (my $version = $VERSION->stringify()) =~ s/^v//;
@@ -48,9 +49,9 @@ sub subst_var {
     return $subst;
 }
 
-my $etc = subst_var('@sysconfdir@', '/etc/ddclient');
-my $cachedir = subst_var('@localstatedir@', '/var') . '/cache/ddclient';
-my $savedir = '/tmp';
+my $etc = subst_var('@sysconfdir@', '%%ETCDIR%%');
+my $cachedir = subst_var('@localstatedir@', '/var') . '/tmp';
+my $savedir = '/var/tmp';
 if ($program =~ /test/i) {
     $etc = '.';
     $cachedir = '.';
@@ -68,7 +69,7 @@ use vars qw($file $lineno);
 local $file   = '';
 local $lineno = '';
 
-$ENV{'PATH'} = (exists($ENV{PATH}) ? "$ENV{PATH}:" : "") . "/sbin:/usr/sbin:/bin:/usr/bin:/etc:/usr/lib:";
+$ENV{'PATH'} = (exists($ENV{PATH}) ? "$ENV{PATH}:" : "") . "/sbin:/usr/sbin:/bin:";
 
 our %globals;
 my ($result, %config, %cache);
@@ -1022,6 +1023,9 @@ sub main {
         ;
     } elsif (opt('daemon')) {
         $SIG{'CHLD'} = 'IGNORE';
+        chdir '/';
+        open(STDIN,  "</dev/null");
+        open(STDOUT, ">/dev/null");
         my $pid = fork;
         if ($pid < 0) {
             print STDERR "${program}: can not fork ($!)\n";
@@ -1029,10 +1033,9 @@ sub main {
         } elsif ($pid) {
             exit 0;
         }
+        setsid;
         $SIG{'CHLD'} = 'DEFAULT';
-        open(STDOUT, ">/dev/null");
-        open(STDERR, ">/dev/null");
-        open(STDIN,  "</dev/null");
+        open(STDERR, "&STDOUT");
         write_pid();
     }
 
@@ -2011,17 +2014,17 @@ sub pipecmd {
     ## execute the command.
     local *FD;
     if (!open(FD, $cmd)) {
-        printf STDERR "%s: cannot execute command %s.\n", $program, $cmd;
+	warning("$program: cannot execute command %s.\n", $cmd);
 
     } elsif ($stdin && (!print FD "$stdin\n")) {
-        printf STDERR "%s: failed writting to %s.\n", $program, $cmd;
+	warning("$program: failed writing to %s.\n", $cmd);
         close(FD);
 
     } elsif (!close(FD)) {
-        printf STDERR "%s: failed closing %s.(%s)\n", $program, $cmd, $@;
+	warning("$program: failed closing %s.($@)\n", $cmd);
 
     } elsif (opt('exec') && $?) {
-        printf STDERR "%s: failed %s. (%s)\n", $program, $cmd, $@;
+	warning("$program: failed %s. ($@)\n", $cmd);
 
     } else {
         $ok = 1;
@@ -2461,6 +2464,7 @@ sub fetch_via_socket_io {
         PeerPort => $port,
         Proto => 'tcp',
         MultiHomed => 1,
+        SSL_ca_file => '%%LOCALBASE%%/share/certs/ca-root-nss.crt',
         Timeout => opt('timeout'),
     );
     my $socket_class = 'IO::Socket::INET';
